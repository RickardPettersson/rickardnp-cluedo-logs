package com.bosicc.cluedo;

import java.io.Serializable;
import java.util.ArrayList;

import android.content.res.Resources;

public class GamePOJO implements Serializable{
	
	/**
	 * Autogenerated Version UID
	 */
	private static final long serialVersionUID = -2652613076649621996L;
	
	private int version = -1;
	 
	private int NumberOfPlayers;
	private int YourPlayer;
	private boolean isCreated = false;
	//private PlayerPOJO[] Players;
	private CardType[][] mCards;
	//public String[] mPeopleName;
    public String[] mPeople;
    public String[] mPlace;
    public String[] mWeapon;
    //public String[] mPlayersList;
    public int[] mPlayersListNum;
    public ArrayList<PlayerPOJO> mPlayers;
    
   
    public int cardnum = 24;
    public int playernum = 6;
	
	public ArrayList<PMovePOJO> mLogsList;
	
	
	public enum CardType {
		DEFAULT(0), NO(1), YES(2), QUESTION(3);

		private final int id;
		
		CardType(int id) {
			this.id = id;
		}

		public int getValue() {
			return id;
		}

		public static CardType findByOrdinal(int ordinal) {
			for (CardType item : values()) {
				if (item.ordinal() == ordinal) {
					return item;
				}
			}
			return DEFAULT;
		}
	}
	
	public enum ShowModeType {
		ALL(0), XODIT(1), PODTVERDIL(2);

		private final int id;
		
		ShowModeType(int id) {
			this.id = id;
		}

		public int getValue() {
			return id;
		}

		public static ShowModeType findByOrdinal(int ordinal) {
			for (ShowModeType item : values()) {
				if (item.ordinal() == ordinal) {
					return item;
				}
			}
			return ALL;
		}
	}

	public GamePOJO(){
		YourPlayer = 1; // default
		NumberOfPlayers = 3; // default
		

		mPeople = new String[playernum];
		mPlace = new String[9];
		mWeapon = new String[9];
		// all raws for list
		mCards  = new CardType[cardnum][playernum]; 
		
		for (int i=0;i<playernum;i++){
			for (int j=0; j<cardnum; j++){
				mCards[j][i] = CardType.DEFAULT;
			}
		}
		
		mPlayers = new ArrayList<PlayerPOJO>();
		mLogsList = new ArrayList<PMovePOJO>();
		
	}
	
	public void setVersion(int ver){
		version = ver;
	}
	
	public int getVersion(){
		return version;
	}
	
	public void setNumberOfPlayers(int num){
		this.NumberOfPlayers = num;
	}
	
	public int getNumberOfPlayers(){
		return NumberOfPlayers;
	}
	
	public void setYourPlayer(int num){
		this.YourPlayer = num;
	}
	
	public int getYourPlayer(){
		return YourPlayer;
	}
	
	public void fillCardsData(){
		setCreatedGame(true);
	}
	
	public CardType[][] getCardsData(){
		return mCards;
	}
	
	public void setCardsData(int pos, int num, CardType type){
		mCards[pos][num] = type;
	}
	
	public void setRowNoData(int pos){
		for (int i=0;i<playernum;i++){
    		setCardsData(pos,i,CardType.NO);
    	}
	}
	
	public void setTypeinRowNoData(int pos, int num, CardType type){
		setRowNoData(pos);
		setCardsData(pos, num, type);
	}
	
	public void setColumnNoData(int raw){
		for (int i=0;i<cardnum;i++){
    		setCardsData(i,raw,CardType.NO);
    	}
	}
	
	public boolean isStarted(){
		return isCreated;
	}
	
	public void setCreatedGame(boolean is){
		isCreated = is;
	}
	
	public void setPlayerNoColumn(int player){
		for (int i=0; i<cardnum; i++){
			mCards[i][player] = CardType.NO;
		}
		
	}
	
	

	public void reset(){
		// Clear logs items
		mLogsList.clear();
		// Clear tabele
		for (int j=0; j<playernum; j++){
			for (int i=0; i<cardnum; i++){
				mCards[i][j] = CardType.DEFAULT;
			}
			// TODO: May be remove not used Class?
			mPlayers.clear();
			//Players[j].reset();
		}
		
		// Set Flag that game not started
		this.setCreatedGame(false);
	}
	
}
